mongodb {
  servers = ["127.0.0.1:27017"]
  db = "lichess"
}
net {
  domain = "lichess.org"
  protocol = "http://"
  base_url = ${net.protocol}${net.domain}
  asset {
    domain = "static.lichess.org"
    version = 91
  }
}
app {
  scheduler.disabled = ${ai.server}
  renderer.name = "renderer"
  router.name = "router"
  web_path = "public"
  timeago_locales_path = ${app.web_path}/vendor/timeago/locales
}
cli {
  username = "thibault"
}
ws { # as in "web service", it's play http client
  timeout = 10 minutes # computer analysis can take a long time!
  useragent = ${net.base_url}
}
hub {
  actor {
    game {
      actor = ${game.actor.name}
      indexer = ${gameSearch.indexer.name}
    }
    renderer = ${app.renderer.name}
    captcher = ${game.captcher.name}
    forum {
      actor = ${forum.actor.name}
      indexer = ${forumSearch.indexer.name}
    }
    messenger = ${message.actor.name}
    router = ${app.router.name}
    team.indexer = ${teamSearch.indexer.name}
    ai = ${ai.actor.name}
    monitor = ${monitor.actor.name}
    tournament.organizer = ${tournament.organizer.name}
    timeline {
      game = ${timeline.game.actor.name}
      user = ${timeline.user.actor.name}
    }
    bookmark = ${bookmark.actor.name}
    round.map = ${round.actor.map.name}
    lobby = ${lobby.actor.name}
    relation = ${relation.actor.name}
    challenger = ${setup.challenger.name}
  }
  socket {
    lobby = ${lobby.socket.name}
    monitor = ${monitor.socket.name}
    site = ${site.socket.name}
    round = ${round.socket.name}
    tournament = ${tournament.socket.name}
    hub {
      name = socket-hub
      timeout = 5 seconds
    }
  }
}
search {
  es {
    host = localhost
    port = 9300
    cluster = elasticsearch
  }
  default_index = lila
  indexes_to_optimize = [${search.default_index}]
}
team {
  collection.team = team
  collection.member = team_member
  collection.request = team_request
  paginator.max_per_page = 15
  paginator.max_user_per_page = 24
  cache.capacity = 8192
}
teamSearch {
  index = ${search.default_index}
  type = team
  paginator.max_per_page = ${team.paginator.max_per_page}
  indexer.name = team-type-indexer
}
relation {
  collection {
    relation = relation
  }
  actor {
    name = relation-actor
    notify_freq = 2 seconds
    resync_freq = 1 minute
  }
}
bookmark {
  collection.bookmark = bookmark
  paginator.max_per_page = ${game.paginator.max_per_page}
  actor.name = bookmark
}
analyse {
  collection.analysis = analysis
  net.domain = ${net.domain}
  cached.nb.ttl = ${game.cached.nb.ttl}
  paginator.max_per_page = ${game.paginator.max_per_page}
}
security {
  collection.security = security
  wiretap.ips = []
  flood.duration = 60 seconds
  firewall {
    enabled=true
    cached.ips.ttl = 10 minutes
    cookie {
      enabled = false
      name=fEKHA4zI74ZrZrom
    }
    collection.firewall = firewall
  }
}
mod {
  collection.modlog = modlog
}
i18n {
  web_path.relative = ${app.web_path}/trans
  file_path.relative = "conf"
  upstream.url_pattern = "http://en.lichess.org/translation/fetch/%d"
  hide_calls.cookie.name="hide_i18n_calls"
  hide_calls.cookie.max_age=604800 # one week
  collection.translation = translation
  request_handler.protocol = ${net.protocol}
}
monitor {
  rps.interval = 1 second
  actor.name = monitor-actor
  socket.name = monitor-socket
  socket.uid.ttl = ${site.socket.uid.ttl}
}
lobby {
  message.ttl = 30 seconds
  orphan_hook.ttl = 5 seconds
  socket {
    name = lobby-socket
    uid.ttl = ${site.socket.uid.ttl}
  }
  actor.name = lobby-actor
  net.domain = ${net.domain}
}
timeline {
  game {
    collection.entry = lobby_entry
    display_max = 8
    actor.name = game-timeline
  }
  user {
    collection.entry = timeline_entry
    display_max = 8
    actor.name = user-timeline
  }
}
game {
  cached.nb.ttl = 1 hour
  paginator.max_per_page = 8
  collection.game = game4
  collection.pgn = pgn
  js_path.raw = public/javascripts/big.js
  js_path.compiled = public/compiled/big.js
  actor.name = game-actor
  captcher.name = captcher
}
gameSearch {
  index = ${search.default_index}
  type = game
  paginator.max_per_page = ${game.paginator.max_per_page}
  indexer.name = game-type-indexer
}
round {
  message.ttl = 30 seconds
  uid.timeout = 10 seconds
  player.disconnect.timeout = 3 minutes
  player.ragequit.timeout = 20 seconds
  finisher.lock.timeout = 20 seconds
  animation.delay = 200 ms
  moretime = 15 seconds
  hijack.timeout = 30 minutes
  collection {
    room = room
    watcher_room = watcher_room
  }
  socket {
    name = round-socket
    timeout = 1 minute
  }
  actor {
    map.name = round-map
  }
  net.domain = ${net.domain}
}
tournament {
  collection {
    tournament = tournament
    room = tournament_room
  }
  message.ttl = 30 seconds
  uid.timeout = 7 seconds # small to avoid missed events
  socket {
    name = tournament-socket
    timeout = 2 minutes
  }
  organizer.name = tournament-organizer
  reminder.name = tournament-reminder
  net.domain = ${net.domain}
}
forum {
  topic.max_per_page = 10
  post.max_per_page = 10
  recent.ttl = 30 minutes
  collection {
    categ = f_categ
    topic = f_topic
    post = f_post
  }
  actor.name = forum
}
forumSearch {
  index = ${search.default_index}
  type = forum
  paginator.max_per_page = 10
  indexer.name = forum-post-type-indexer
}
message {
  thread.max_per_page = 30
  collection.thread = m_thread
  actor.name = message
}
setup {
  friend.memo.ttl = 1 day
  collection {
    user_config = config
    anon_config = config_anon
  }
  challenger.name = "setup-challenger"
}
site {
  socket {
    name = site-socket
    uid.ttl = 10 seconds
  }
}
user {
  paginator.max_per_page = 40
  elo_updater.floor = 800
  cached.nb.ttl = 10 minutes
  online.ttl = 7 seconds
  ranking.ttl = 10 minutes
  collection {
    user = user2
    history = history
  }
}
ai {
  stress = false
  engine = stockfish 
  server = false
  client = true
  stockfish {
    exec_path = "/usr/bin/stockfish"
    hash_size = 1024
    threads = 4
    debug = false
    base_url = "http://ai-paul.lichess.org/ai/stockfish"
    play {
      movetime = 160 ms
      timeout = 5 seconds
      url = ${ai.stockfish.base_url}/play
    }
    analyse {
      movetime = 300 ms
      timeout = 10 minutes
      url = ${ai.stockfish.base_url}/analyse
    }
    load.url = ${ai.stockfish.base_url}/load
    queue {
      name = "ai-stockfish-queue"
      dispatcher = "akka.stockfish-queue-dispatcher"
    }
  }
  actor.name = ai
}
application {
  langs="en,fr,ru,de,tr,sr,lv,bs,da,es,ro,it,fi,uk,pt,pl,nl,vi,sv,cs,sk,hu,ca,sl,az,nn,eo,tp,el,fp,lt,nb,et,hy,af,hi,ar,zh,gl,hr,mk,id,ja,bg,th,fa,he,mr,mn,cy,gd,ga,sq,be,ka,sw,ps,is,kk,io,gu,fo,eu,bn,id,la,jv,ky,pi,as,le,ta,sa"
  secret="CiebwjgIM9cHQ;I?Xk:sfqDJ;BhIe:jsL?r=?IPF[saf>s^r0]?0grUq4>q?5mP^"
  global="lila.app.Global"
}
session {
  cookieName="lila2"
  maxAge=31536000
}
wiki {
  collection.page = wiki
  git.url = "git://github.com/ornicar/lichess.wiki.git"
}
importer {
  delay = 50 milliseconds
}

# trust proxy X-Forwarded-For header
trustxforwarded=true

dbplugin = disabled
evolutionplugin = disabled
ehcacheplugin = disabled

logger {
  root=INFO
  play=INFO
  application=INFO
  org.elasticsearch=INFO
  reactivemongo=INFO
}

akka {
  loglevel = INFO
  stdout-loglevel = INFO
  log-config-on-start = off
}
play {
  akka {
    stockfish-queue-dispatcher {
      mailbox-type = "lila.ai.stockfish.MailBox"
    }
  }
}
